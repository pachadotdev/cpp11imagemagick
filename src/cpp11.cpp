// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// animation.cpp
XPtrImage magick_image_animate(XPtrImage input, cpp11::integers delay, size_t iter, const char * method, bool optimize);
extern "C" SEXP _cpp11imagemagick_magick_image_animate(SEXP input, SEXP delay, SEXP iter, SEXP method, SEXP optimize) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_animate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(delay), cpp11::as_cpp<cpp11::decay_t<size_t>>(iter), cpp11::as_cpp<cpp11::decay_t<const char *>>(method), cpp11::as_cpp<cpp11::decay_t<bool>>(optimize)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_coalesce(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_coalesce(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_coalesce(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_morph(XPtrImage image, int frames);
extern "C" SEXP _cpp11imagemagick_magick_image_morph(SEXP image, SEXP frames) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_morph(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<int>>(frames)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_mosaic(XPtrImage input, cpp11::strings composite);
extern "C" SEXP _cpp11imagemagick_magick_image_mosaic(SEXP input, SEXP composite) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_mosaic(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(composite)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_flatten(XPtrImage input, cpp11::strings composite);
extern "C" SEXP _cpp11imagemagick_magick_image_flatten(SEXP input, SEXP composite) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_flatten(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(composite)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_average(XPtrImage image);
extern "C" SEXP _cpp11imagemagick_magick_image_average(SEXP image) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_average(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image)));
  END_CPP11
}
// animation.cpp
XPtrImage magick_image_append(XPtrImage image, bool stack);
extern "C" SEXP _cpp11imagemagick_magick_image_append(SEXP image, SEXP stack) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_append(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<bool>>(stack)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_comment(XPtrImage input, cpp11::strings set);
extern "C" SEXP _cpp11imagemagick_magick_attr_comment(SEXP input, SEXP set) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_comment(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(set)));
  END_CPP11
}
// attributes.cpp
cpp11::logicals magick_attr_text_antialias(XPtrImage input, cpp11::logicals set);
extern "C" SEXP _cpp11imagemagick_magick_attr_text_antialias(SEXP input, SEXP set) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_text_antialias(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(set)));
  END_CPP11
}
// attributes.cpp
cpp11::logicals magick_attr_stroke_antialias(XPtrImage input, cpp11::logicals set);
extern "C" SEXP _cpp11imagemagick_magick_attr_stroke_antialias(SEXP input, SEXP set) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_stroke_antialias(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(set)));
  END_CPP11
}
// attributes.cpp
cpp11::integers magick_attr_animationdelay(XPtrImage input, cpp11::integers delay);
extern "C" SEXP _cpp11imagemagick_magick_attr_animationdelay(SEXP input, SEXP delay) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_animationdelay(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(delay)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_backgroundcolor(XPtrImage input, cpp11::strings color);
extern "C" SEXP _cpp11imagemagick_magick_attr_backgroundcolor(SEXP input, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_backgroundcolor(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_boxcolor(XPtrImage input, cpp11::strings color);
extern "C" SEXP _cpp11imagemagick_magick_attr_boxcolor(SEXP input, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_boxcolor(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_fillcolor(XPtrImage input, cpp11::strings color);
extern "C" SEXP _cpp11imagemagick_magick_attr_fillcolor(SEXP input, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_fillcolor(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_font(XPtrImage input, cpp11::strings font);
extern "C" SEXP _cpp11imagemagick_magick_attr_font(SEXP input, SEXP font) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_font(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(font)));
  END_CPP11
}
// attributes.cpp
cpp11::integers magick_attr_fontsize(XPtrImage input, cpp11::integers pointsize);
extern "C" SEXP _cpp11imagemagick_magick_attr_fontsize(SEXP input, SEXP pointsize) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_fontsize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(pointsize)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_label(XPtrImage input, cpp11::strings label);
extern "C" SEXP _cpp11imagemagick_magick_attr_label(SEXP input, SEXP label) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_label(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(label)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_format(XPtrImage input, cpp11::strings format);
extern "C" SEXP _cpp11imagemagick_magick_attr_format(SEXP input, SEXP format) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_format(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(format)));
  END_CPP11
}
// attributes.cpp
cpp11::integers magick_attr_quality(XPtrImage input, cpp11::integers quality);
extern "C" SEXP _cpp11imagemagick_magick_attr_quality(SEXP input, SEXP quality) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_quality(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(quality)));
  END_CPP11
}
// attributes.cpp
cpp11::integers magick_attr_quantize(XPtrImage input, cpp11::integers numcolors);
extern "C" SEXP _cpp11imagemagick_magick_attr_quantize(SEXP input, SEXP numcolors) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_quantize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(numcolors)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_attr_density(XPtrImage input, cpp11::strings density);
extern "C" SEXP _cpp11imagemagick_magick_attr_density(SEXP input, SEXP density) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_attr_density(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(density)));
  END_CPP11
}
// attributes.cpp
cpp11::list magick_image_info(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_info(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_info(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// attributes.cpp
cpp11::strings magick_image_as_raster(cpp11::raws data);
extern "C" SEXP _cpp11imagemagick_magick_image_as_raster(SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_as_raster(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(data)));
  END_CPP11
}
// base.cpp
void my_magick_init(DllInfo * dll);
extern "C" SEXP _cpp11imagemagick_my_magick_init(SEXP dll) {
  BEGIN_CPP11
    my_magick_init(cpp11::as_cpp<cpp11::decay_t<DllInfo *>>(dll));
    return R_NilValue;
  END_CPP11
}
// base.cpp
int magick_threads(size_t i);
extern "C" SEXP _cpp11imagemagick_magick_threads(SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_threads(cpp11::as_cpp<cpp11::decay_t<size_t>>(i)));
  END_CPP11
}
// base.cpp
int magick_image_dead(XPtrImage image);
extern "C" SEXP _cpp11imagemagick_magick_image_dead(SEXP image) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_dead(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image)));
  END_CPP11
}
// base.cpp
int magick_image_length(XPtrImage image);
extern "C" SEXP _cpp11imagemagick_magick_image_length(SEXP image) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_length(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_blank(size_t width, size_t height, const char * color, const char * pseudo_image, SEXP options);
extern "C" SEXP _cpp11imagemagick_magick_image_blank(SEXP width, SEXP height, SEXP color, SEXP pseudo_image, SEXP options) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_blank(cpp11::as_cpp<cpp11::decay_t<size_t>>(width), cpp11::as_cpp<cpp11::decay_t<size_t>>(height), cpp11::as_cpp<cpp11::decay_t<const char *>>(color), cpp11::as_cpp<cpp11::decay_t<const char *>>(pseudo_image), cpp11::as_cpp<cpp11::decay_t<SEXP>>(options)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_rev(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_rev(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_rev(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_join(cpp11::list input);
extern "C" SEXP _cpp11imagemagick_magick_image_join(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_join(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(input)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_subset(XPtrImage image, cpp11::integers index);
extern "C" SEXP _cpp11imagemagick_magick_image_subset(SEXP image, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_subset(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_replace(XPtrImage image, cpp11::integers index, XPtrImage value);
extern "C" SEXP _cpp11imagemagick_magick_image_replace(SEXP image, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_replace(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(value)));
  END_CPP11
}
// base.cpp
XPtrImage magick_image_copy(XPtrImage image, XPtrImage add);
extern "C" SEXP _cpp11imagemagick_magick_image_copy(SEXP image, SEXP add) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_copy(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(add)));
  END_CPP11
}
// base.cpp
void magick_image_destroy(XPtrImage image);
extern "C" SEXP _cpp11imagemagick_magick_image_destroy(SEXP image) {
  BEGIN_CPP11
    magick_image_destroy(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image));
    return R_NilValue;
  END_CPP11
}
// base.cpp
cpp11::list magick_resource_limits();
extern "C" SEXP _cpp11imagemagick_magick_resource_limits() {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_resource_limits());
  END_CPP11
}
// color.cpp
XPtrImage magick_image_contrast(XPtrImage input, size_t sharpen);
extern "C" SEXP _cpp11imagemagick_magick_image_contrast(SEXP input, SEXP sharpen) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_contrast(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<size_t>>(sharpen)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_normalize(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_normalize(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_normalize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_modulate(XPtrImage input, double brightness, double saturation, double hue);
extern "C" SEXP _cpp11imagemagick_magick_image_modulate(SEXP input, SEXP brightness, SEXP saturation, SEXP hue) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_modulate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(brightness), cpp11::as_cpp<cpp11::decay_t<double>>(saturation), cpp11::as_cpp<cpp11::decay_t<double>>(hue)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_map(XPtrImage input, XPtrImage map_image, bool dither);
extern "C" SEXP _cpp11imagemagick_magick_image_map(SEXP input, SEXP map_image, SEXP dither) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_map(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(map_image), cpp11::as_cpp<cpp11::decay_t<bool>>(dither)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_channel(XPtrImage input, const char * channel);
extern "C" SEXP _cpp11imagemagick_magick_image_channel(SEXP input, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_channel(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(channel)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_colorize(XPtrImage input, const size_t opacity, const char * color);
extern "C" SEXP _cpp11imagemagick_magick_image_colorize(SEXP input, SEXP opacity, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_colorize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const size_t>>(opacity), cpp11::as_cpp<cpp11::decay_t<const char *>>(color)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_enhance(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_enhance(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_enhance(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_equalize(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_equalize(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_equalize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_median(XPtrImage input, double radius);
extern "C" SEXP _cpp11imagemagick_magick_image_median(SEXP input, SEXP radius) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_median(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(radius)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_quantize(XPtrImage input, size_t max, cpp11::strings space, cpp11::logicals dither, cpp11::integers depth);
extern "C" SEXP _cpp11imagemagick_magick_image_quantize(SEXP input, SEXP max, SEXP space, SEXP dither, SEXP depth) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_quantize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<size_t>>(max), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(space), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(dither), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(depth)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_ordered_dither(XPtrImage input, std::string threshold_map);
extern "C" SEXP _cpp11imagemagick_magick_image_ordered_dither(SEXP input, SEXP threshold_map) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_ordered_dither(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(threshold_map)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_transparent(XPtrImage input, const char * color, double fuzz_percent);
extern "C" SEXP _cpp11imagemagick_magick_image_transparent(SEXP input, SEXP color, SEXP fuzz_percent) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_transparent(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(color), cpp11::as_cpp<cpp11::decay_t<double>>(fuzz_percent)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_background(XPtrImage input, const char * color);
extern "C" SEXP _cpp11imagemagick_magick_image_background(SEXP input, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_background(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(color)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_lat(XPtrImage input, const char * geomstr);
extern "C" SEXP _cpp11imagemagick_magick_image_lat(SEXP input, SEXP geomstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_lat(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(geomstr)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_threshold_black(XPtrImage input, const std::string threshold, cpp11::strings channel);
extern "C" SEXP _cpp11imagemagick_magick_image_threshold_black(SEXP input, SEXP threshold, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_threshold_black(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const std::string>>(threshold), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(channel)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_threshold_white(XPtrImage input, const std::string threshold, cpp11::strings channel);
extern "C" SEXP _cpp11imagemagick_magick_image_threshold_white(SEXP input, SEXP threshold, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_threshold_white(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const std::string>>(threshold), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(channel)));
  END_CPP11
}
// color.cpp
XPtrImage magick_image_level(XPtrImage input, double black_pct, double white_pct, double mid_point, cpp11::strings channel);
extern "C" SEXP _cpp11imagemagick_magick_image_level(SEXP input, SEXP black_pct, SEXP white_pct, SEXP mid_point, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_level(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(black_pct), cpp11::as_cpp<cpp11::decay_t<double>>(white_pct), cpp11::as_cpp<cpp11::decay_t<double>>(mid_point), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(channel)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_composite(XPtrImage input, XPtrImage composite_image, const char * offset, const char * gravity, const char * composite, cpp11::strings args);
extern "C" SEXP _cpp11imagemagick_magick_image_composite(SEXP input, SEXP composite_image, SEXP offset, SEXP gravity, SEXP composite, SEXP args) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_composite(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(composite_image), cpp11::as_cpp<cpp11::decay_t<const char *>>(offset), cpp11::as_cpp<cpp11::decay_t<const char *>>(gravity), cpp11::as_cpp<cpp11::decay_t<const char *>>(composite), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(args)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_border(XPtrImage input, cpp11::strings color, cpp11::strings geometry, cpp11::strings composite);
extern "C" SEXP _cpp11imagemagick_magick_image_border(SEXP input, SEXP color, SEXP geometry, SEXP composite) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_border(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(composite)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_frame(XPtrImage input, cpp11::strings color, cpp11::strings geometry);
extern "C" SEXP _cpp11imagemagick_magick_image_frame(SEXP input, SEXP color, SEXP geometry) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_frame(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_shadow_mask(XPtrImage input, const char * geomstr);
extern "C" SEXP _cpp11imagemagick_magick_image_shadow_mask(SEXP input, SEXP geomstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_shadow_mask(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(geomstr)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_shade(XPtrImage input, double azimuth, double elevation, bool color);
extern "C" SEXP _cpp11imagemagick_magick_image_shade(SEXP input, SEXP azimuth, SEXP elevation, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_shade(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(azimuth), cpp11::as_cpp<cpp11::decay_t<double>>(elevation), cpp11::as_cpp<cpp11::decay_t<bool>>(color)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_crop(XPtrImage input, cpp11::strings geometry, cpp11::strings gravity, bool repage);
extern "C" SEXP _cpp11imagemagick_magick_image_crop(SEXP input, SEXP geometry, SEXP gravity, SEXP repage) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_crop(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(gravity), cpp11::as_cpp<cpp11::decay_t<bool>>(repage)));
  END_CPP11
}
// composite.cpp
XPtrImage magick_image_extent(XPtrImage input, cpp11::strings geometry, cpp11::strings gravity, cpp11::strings color);
extern "C" SEXP _cpp11imagemagick_magick_image_extent(SEXP input, SEXP geometry, SEXP gravity, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_extent(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(gravity), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color)));
  END_CPP11
}
// composite.cpp
cpp11::strings magick_image_artifact(XPtrImage input, std::string name);
extern "C" SEXP _cpp11imagemagick_magick_image_artifact(SEXP input, SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_artifact(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// config.cc
cpp11::list magick_coder_info(std::string format);
extern "C" SEXP _cpp11imagemagick_magick_coder_info(SEXP format) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_coder_info(cpp11::as_cpp<cpp11::decay_t<std::string>>(format)));
  END_CPP11
}
// config.cc
cpp11::list magick_config_internal();
extern "C" SEXP _cpp11imagemagick_magick_config_internal() {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_config_internal());
  END_CPP11
}
// convolve.cpp
XPtrImage magick_image_fx(XPtrImage input, std::string expression, cpp11::strings channel);
extern "C" SEXP _cpp11imagemagick_magick_image_fx(SEXP input, SEXP expression, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_fx(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(expression), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(channel)));
  END_CPP11
}
// convolve.cpp
XPtrImage magick_image_fx_sequence(XPtrImage input, const std::string expr);
extern "C" SEXP _cpp11imagemagick_magick_image_fx_sequence(SEXP input, SEXP expr) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_fx_sequence(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const std::string>>(expr)));
  END_CPP11
}
// convolve.cpp
XPtrImage magick_image_morphology(XPtrImage input, std::string method, std::string kernel, ssize_t iter, cpp11::strings opt_names, cpp11::strings opt_values);
extern "C" SEXP _cpp11imagemagick_magick_image_morphology(SEXP input, SEXP method, SEXP kernel, SEXP iter, SEXP opt_names, SEXP opt_values) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_morphology(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(method), cpp11::as_cpp<cpp11::decay_t<std::string>>(kernel), cpp11::as_cpp<cpp11::decay_t<ssize_t>>(iter), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(opt_names), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(opt_values)));
  END_CPP11
}
// convolve.cpp
XPtrImage magick_image_convolve_kernel(XPtrImage input, std::string kernel, ssize_t iter, cpp11::strings scaling, cpp11::strings bias);
extern "C" SEXP _cpp11imagemagick_magick_image_convolve_kernel(SEXP input, SEXP kernel, SEXP iter, SEXP scaling, SEXP bias) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_convolve_kernel(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(kernel), cpp11::as_cpp<cpp11::decay_t<ssize_t>>(iter), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(scaling), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(bias)));
  END_CPP11
}
// convolve.cpp
XPtrImage magick_image_convolve_matrix(XPtrImage input, cpp11::doubles_matrix<> matrix, size_t iter, cpp11::strings scaling, cpp11::strings bias);
extern "C" SEXP _cpp11imagemagick_magick_image_convolve_matrix(SEXP input, SEXP matrix, SEXP iter, SEXP scaling, SEXP bias) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_convolve_matrix(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(matrix), cpp11::as_cpp<cpp11::decay_t<size_t>>(iter), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(scaling), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(bias)));
  END_CPP11
}
// device.cpp
XPtrImage magick_device_internal(std::string bg, int width, int height, double pointsize, int res, bool clip, bool antialias, bool drawing);
extern "C" SEXP _cpp11imagemagick_magick_device_internal(SEXP bg, SEXP width, SEXP height, SEXP pointsize, SEXP res, SEXP clip, SEXP antialias, SEXP drawing) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_device_internal(cpp11::as_cpp<cpp11::decay_t<std::string>>(bg), cpp11::as_cpp<cpp11::decay_t<int>>(width), cpp11::as_cpp<cpp11::decay_t<int>>(height), cpp11::as_cpp<cpp11::decay_t<double>>(pointsize), cpp11::as_cpp<cpp11::decay_t<int>>(res), cpp11::as_cpp<cpp11::decay_t<bool>>(clip), cpp11::as_cpp<cpp11::decay_t<bool>>(antialias), cpp11::as_cpp<cpp11::decay_t<bool>>(drawing)));
  END_CPP11
}
// device.cpp
XPtrImage magick_device_get(int n);
extern "C" SEXP _cpp11imagemagick_magick_device_get(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_device_get(cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// device.cpp
SEXP magick_device_pop();
extern "C" SEXP _cpp11imagemagick_magick_device_pop() {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_device_pop());
  END_CPP11
}
// edges.cpp
XPtrImage magick_image_edge(XPtrImage input, size_t radius);
extern "C" SEXP _cpp11imagemagick_magick_image_edge(SEXP input, SEXP radius) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_edge(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<size_t>>(radius)));
  END_CPP11
}
// edges.cpp
XPtrImage magick_image_canny(XPtrImage input, std::string geomstr);
extern "C" SEXP _cpp11imagemagick_magick_image_canny(SEXP input, SEXP geomstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_canny(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(geomstr)));
  END_CPP11
}
// edges.cpp
XPtrImage magick_image_houghline(XPtrImage input, std::string geomstr, std::string col, std::string bg, double lwd);
extern "C" SEXP _cpp11imagemagick_magick_image_houghline(SEXP input, SEXP geomstr, SEXP col, SEXP bg, SEXP lwd) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_houghline(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(geomstr), cpp11::as_cpp<cpp11::decay_t<std::string>>(col), cpp11::as_cpp<cpp11::decay_t<std::string>>(bg), cpp11::as_cpp<cpp11::decay_t<double>>(lwd)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbitmap_native(cpp11::integers_matrix<> x);
extern "C" SEXP _cpp11imagemagick_magick_image_readbitmap_native(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbitmap_native(cpp11::as_cpp<cpp11::decay_t<cpp11::integers_matrix<>>>(x)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbitmap_raster1(cpp11::strings_matrix<> x);
extern "C" SEXP _cpp11imagemagick_magick_image_readbitmap_raster1(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbitmap_raster1(cpp11::as_cpp<cpp11::decay_t<cpp11::strings_matrix<>>>(x)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbitmap_raster2(cpp11::strings_matrix<> x);
extern "C" SEXP _cpp11imagemagick_magick_image_readbitmap_raster2(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbitmap_raster2(cpp11::as_cpp<cpp11::decay_t<cpp11::strings_matrix<>>>(x)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbitmap_raw(cpp11::raws x);
extern "C" SEXP _cpp11imagemagick_magick_image_readbitmap_raw(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbitmap_raw(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbitmap_double(cpp11::doubles x);
extern "C" SEXP _cpp11imagemagick_magick_image_readbitmap_double(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbitmap_double(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readbin(cpp11::raws x, cpp11::strings density, cpp11::integers depth, bool strip, cpp11::strings defines);
extern "C" SEXP _cpp11imagemagick_magick_image_readbin(SEXP x, SEXP density, SEXP depth, SEXP strip, SEXP defines) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readbin(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(density), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(depth), cpp11::as_cpp<cpp11::decay_t<bool>>(strip), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(defines)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_readpath(cpp11::strings paths, cpp11::strings density, cpp11::integers depth, bool strip, cpp11::strings defines);
extern "C" SEXP _cpp11imagemagick_magick_image_readpath(SEXP paths, SEXP density, SEXP depth, SEXP strip, SEXP defines) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_readpath(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(paths), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(density), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(depth), cpp11::as_cpp<cpp11::decay_t<bool>>(strip), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(defines)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_read_list(cpp11::list list);
extern "C" SEXP _cpp11imagemagick_magick_image_read_list(SEXP list) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_read_list(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(list)));
  END_CPP11
}
// edit.cpp
cpp11::raws magick_image_write(XPtrImage input, cpp11::strings format, cpp11::integers quality, cpp11::integers depth, cpp11::strings density, cpp11::strings comment, cpp11::strings compression);
extern "C" SEXP _cpp11imagemagick_magick_image_write(SEXP input, SEXP format, SEXP quality, SEXP depth, SEXP density, SEXP comment, SEXP compression) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_write(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(format), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(quality), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(depth), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(density), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(comment), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(compression)));
  END_CPP11
}
// edit.cpp
cpp11::raws magick_image_write_frame(XPtrImage input, const char * format, size_t i);
extern "C" SEXP _cpp11imagemagick_magick_image_write_frame(SEXP input, SEXP format, SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_write_frame(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(format), cpp11::as_cpp<cpp11::decay_t<size_t>>(i)));
  END_CPP11
}
// edit.cpp
cpp11::integers magick_image_write_integer(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_write_integer(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_write_integer(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_display(XPtrImage image, bool animate);
extern "C" SEXP _cpp11imagemagick_magick_image_display(SEXP image, SEXP animate) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_display(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<bool>>(animate)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_fft(XPtrImage image);
extern "C" SEXP _cpp11imagemagick_magick_image_fft(SEXP image) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_fft(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_montage(XPtrImage image, cpp11::strings geometry, cpp11::strings tile, cpp11::strings gravity, std::string bg, bool shadow);
extern "C" SEXP _cpp11imagemagick_magick_image_montage(SEXP image, SEXP geometry, SEXP tile, SEXP gravity, SEXP bg, SEXP shadow) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_montage(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(image), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(tile), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(gravity), cpp11::as_cpp<cpp11::decay_t<std::string>>(bg), cpp11::as_cpp<cpp11::decay_t<bool>>(shadow)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_strip(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_strip(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_strip(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_separate(XPtrImage input, const char * channel);
extern "C" SEXP _cpp11imagemagick_magick_image_separate(SEXP input, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_separate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(channel)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_combine(XPtrImage input, const char * colorspace, const char * channel);
extern "C" SEXP _cpp11imagemagick_magick_image_combine(SEXP input, SEXP colorspace, SEXP channel) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_combine(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(colorspace), cpp11::as_cpp<cpp11::decay_t<const char *>>(channel)));
  END_CPP11
}
// edit.cpp
XPtrImage magick_image_set_define(XPtrImage input, cpp11::strings format, cpp11::strings name, cpp11::strings value);
extern "C" SEXP _cpp11imagemagick_magick_image_set_define(SEXP input, SEXP format, SEXP name, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_set_define(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(format), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(name), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(value)));
  END_CPP11
}
// options.cpp
cpp11::strings list_options(const char * str);
extern "C" SEXP _cpp11imagemagick_list_options(SEXP str) {
  BEGIN_CPP11
    return cpp11::as_sexp(list_options(cpp11::as_cpp<cpp11::decay_t<const char *>>(str)));
  END_CPP11
}
// options.cpp
cpp11::data_frame list_font_info();
extern "C" SEXP _cpp11imagemagick_list_font_info() {
  BEGIN_CPP11
    return cpp11::as_sexp(list_font_info());
  END_CPP11
}
// options.cpp
void dump_option_list(SEXP args);
extern "C" SEXP _cpp11imagemagick_dump_option_list(SEXP args) {
  BEGIN_CPP11
    dump_option_list(cpp11::as_cpp<cpp11::decay_t<SEXP>>(args));
    return R_NilValue;
  END_CPP11
}
// options.cpp
cpp11::strings set_magick_tempdir(const char * new_tmpdir);
extern "C" SEXP _cpp11imagemagick_set_magick_tempdir(SEXP new_tmpdir) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_magick_tempdir(cpp11::as_cpp<cpp11::decay_t<const char *>>(new_tmpdir)));
  END_CPP11
}
// options.cpp
void set_magick_seed(unsigned long seed);
extern "C" SEXP _cpp11imagemagick_set_magick_seed(SEXP seed) {
  BEGIN_CPP11
    set_magick_seed(cpp11::as_cpp<cpp11::decay_t<unsigned long>>(seed));
    return R_NilValue;
  END_CPP11
}
// properties.cpp
cpp11::data_frame magick_image_properties(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_properties(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_properties(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_scale(XPtrImage input, cpp11::strings geometry);
extern "C" SEXP _cpp11imagemagick_magick_image_scale(SEXP input, SEXP geometry) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_scale(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_sample(XPtrImage input, cpp11::strings geometry);
extern "C" SEXP _cpp11imagemagick_magick_image_sample(SEXP input, SEXP geometry) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_sample(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_resize(XPtrImage input, cpp11::strings geometry, cpp11::strings filter);
extern "C" SEXP _cpp11imagemagick_magick_image_resize(SEXP input, SEXP geometry, SEXP filter) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_resize(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(geometry), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(filter)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_rotate(XPtrImage input, double degrees);
extern "C" SEXP _cpp11imagemagick_magick_image_rotate(SEXP input, SEXP degrees) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_rotate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(degrees)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_chop(XPtrImage input, const char * geometry);
extern "C" SEXP _cpp11imagemagick_magick_image_chop(SEXP input, SEXP geometry) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_chop(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(geometry)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_trim(XPtrImage input, double fuzz_percent);
extern "C" SEXP _cpp11imagemagick_magick_image_trim(SEXP input, SEXP fuzz_percent) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_trim(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(fuzz_percent)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_flip(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_flip(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_flip(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_flop(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_flop(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_flop(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// resize.cpp
XPtrImage magick_image_shear(XPtrImage input, const char * geometry, const char * color);
extern "C" SEXP _cpp11imagemagick_magick_image_shear(SEXP input, SEXP geometry, SEXP color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_shear(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(geometry), cpp11::as_cpp<cpp11::decay_t<const char *>>(color)));
  END_CPP11
}
// segment.cpp
XPtrImage magick_image_fuzzycmeans(XPtrImage input, const double min_pixels, const double smoothing);
extern "C" SEXP _cpp11imagemagick_magick_image_fuzzycmeans(SEXP input, SEXP min_pixels, SEXP smoothing) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_fuzzycmeans(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const double>>(min_pixels), cpp11::as_cpp<cpp11::decay_t<const double>>(smoothing)));
  END_CPP11
}
// segment.cpp
XPtrImage magick_image_connect(XPtrImage input, const size_t connectivity);
extern "C" SEXP _cpp11imagemagick_magick_image_connect(SEXP input, SEXP connectivity) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_connect(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const size_t>>(connectivity)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_noise(XPtrImage input, const char * noisetype);
extern "C" SEXP _cpp11imagemagick_magick_image_noise(SEXP input, SEXP noisetype) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_noise(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(noisetype)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_blur(XPtrImage input, const double radius, const double sigma);
extern "C" SEXP _cpp11imagemagick_magick_image_blur(SEXP input, SEXP radius, SEXP sigma) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_blur(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const double>>(radius), cpp11::as_cpp<cpp11::decay_t<const double>>(sigma)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_motion_blur(XPtrImage input, const double radius, const double sigma, const double angle);
extern "C" SEXP _cpp11imagemagick_magick_image_motion_blur(SEXP input, SEXP radius, SEXP sigma, SEXP angle) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_motion_blur(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const double>>(radius), cpp11::as_cpp<cpp11::decay_t<const double>>(sigma), cpp11::as_cpp<cpp11::decay_t<const double>>(angle)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_charcoal(XPtrImage input, const double radius, const double sigma);
extern "C" SEXP _cpp11imagemagick_magick_image_charcoal(SEXP input, SEXP radius, SEXP sigma) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_charcoal(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const double>>(radius), cpp11::as_cpp<cpp11::decay_t<const double>>(sigma)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_deskew(XPtrImage input, double treshold);
extern "C" SEXP _cpp11imagemagick_magick_image_deskew(SEXP input, SEXP treshold) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_deskew(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(treshold)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_emboss(XPtrImage input, const double radius, const double sigma);
extern "C" SEXP _cpp11imagemagick_magick_image_emboss(SEXP input, SEXP radius, SEXP sigma) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_emboss(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const double>>(radius), cpp11::as_cpp<cpp11::decay_t<const double>>(sigma)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_fill(XPtrImage input, const char * color, const char * point, double fuzz_percent, cpp11::strings border_color);
extern "C" SEXP _cpp11imagemagick_magick_image_fill(SEXP input, SEXP color, SEXP point, SEXP fuzz_percent, SEXP border_color) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_fill(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const char *>>(color), cpp11::as_cpp<cpp11::decay_t<const char *>>(point), cpp11::as_cpp<cpp11::decay_t<double>>(fuzz_percent), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(border_color)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_negate(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_negate(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_negate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_oilpaint(XPtrImage input, size_t radius);
extern "C" SEXP _cpp11imagemagick_magick_image_oilpaint(SEXP input, SEXP radius) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_oilpaint(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<size_t>>(radius)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_implode(XPtrImage input, double factor);
extern "C" SEXP _cpp11imagemagick_magick_image_implode(SEXP input, SEXP factor) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_implode(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<double>>(factor)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_format(XPtrImage input, cpp11::strings format, cpp11::strings type, cpp11::strings space, cpp11::integers depth, cpp11::logicals antialias, cpp11::logicals matte, cpp11::strings interlace, cpp11::raws profile);
extern "C" SEXP _cpp11imagemagick_magick_image_format(SEXP input, SEXP format, SEXP type, SEXP space, SEXP depth, SEXP antialias, SEXP matte, SEXP interlace, SEXP profile) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_format(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(format), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(type), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(space), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(depth), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(antialias), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(matte), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(interlace), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(profile)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_page(XPtrImage input, cpp11::strings pagesize, cpp11::strings density);
extern "C" SEXP _cpp11imagemagick_magick_image_page(SEXP input, SEXP pagesize, SEXP density) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_page(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(pagesize), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(density)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_repage(XPtrImage input);
extern "C" SEXP _cpp11imagemagick_magick_image_repage(SEXP input) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_repage(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_orient(XPtrImage input, cpp11::strings orientation);
extern "C" SEXP _cpp11imagemagick_magick_image_orient(SEXP input, SEXP orientation) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_orient(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(orientation)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_despeckle(XPtrImage input, int times);
extern "C" SEXP _cpp11imagemagick_magick_image_despeckle(SEXP input, SEXP times) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_despeckle(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<int>>(times)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_reducenoise(XPtrImage input, const size_t radius);
extern "C" SEXP _cpp11imagemagick_magick_image_reducenoise(SEXP input, SEXP radius) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_reducenoise(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<const size_t>>(radius)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_annotate(XPtrImage input, cpp11::strings text, const char * gravity, const char * location, double rot, double size, const char * font, const char * style, double weight, double kerning, cpp11::strings decoration, cpp11::strings color, cpp11::strings strokecolor, cpp11::integers strokewidth, cpp11::strings boxcolor);
extern "C" SEXP _cpp11imagemagick_magick_image_annotate(SEXP input, SEXP text, SEXP gravity, SEXP location, SEXP rot, SEXP size, SEXP font, SEXP style, SEXP weight, SEXP kerning, SEXP decoration, SEXP color, SEXP strokecolor, SEXP strokewidth, SEXP boxcolor) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_annotate(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(text), cpp11::as_cpp<cpp11::decay_t<const char *>>(gravity), cpp11::as_cpp<cpp11::decay_t<const char *>>(location), cpp11::as_cpp<cpp11::decay_t<double>>(rot), cpp11::as_cpp<cpp11::decay_t<double>>(size), cpp11::as_cpp<cpp11::decay_t<const char *>>(font), cpp11::as_cpp<cpp11::decay_t<const char *>>(style), cpp11::as_cpp<cpp11::decay_t<double>>(weight), cpp11::as_cpp<cpp11::decay_t<double>>(kerning), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(decoration), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(color), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(strokecolor), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(strokewidth), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(boxcolor)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_compare(XPtrImage input, XPtrImage reference_image, const char  * metric, double fuzz_percent);
extern "C" SEXP _cpp11imagemagick_magick_image_compare(SEXP input, SEXP reference_image, SEXP metric, SEXP fuzz_percent) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_compare(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(reference_image), cpp11::as_cpp<cpp11::decay_t<const char  *>>(metric), cpp11::as_cpp<cpp11::decay_t<double>>(fuzz_percent)));
  END_CPP11
}
// transformations.cpp
XPtrImage magick_image_distort(XPtrImage input, std::string method, cpp11::doubles values, bool bestfit);
extern "C" SEXP _cpp11imagemagick_magick_image_distort(SEXP input, SEXP method, SEXP values, SEXP bestfit) {
  BEGIN_CPP11
    return cpp11::as_sexp(magick_image_distort(cpp11::as_cpp<cpp11::decay_t<XPtrImage>>(input), cpp11::as_cpp<cpp11::decay_t<std::string>>(method), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(values), cpp11::as_cpp<cpp11::decay_t<bool>>(bestfit)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_cpp11imagemagick_dump_option_list",                (DL_FUNC) &_cpp11imagemagick_dump_option_list,                 1},
    {"_cpp11imagemagick_list_font_info",                  (DL_FUNC) &_cpp11imagemagick_list_font_info,                   0},
    {"_cpp11imagemagick_list_options",                    (DL_FUNC) &_cpp11imagemagick_list_options,                     1},
    {"_cpp11imagemagick_magick_attr_animationdelay",      (DL_FUNC) &_cpp11imagemagick_magick_attr_animationdelay,       2},
    {"_cpp11imagemagick_magick_attr_backgroundcolor",     (DL_FUNC) &_cpp11imagemagick_magick_attr_backgroundcolor,      2},
    {"_cpp11imagemagick_magick_attr_boxcolor",            (DL_FUNC) &_cpp11imagemagick_magick_attr_boxcolor,             2},
    {"_cpp11imagemagick_magick_attr_comment",             (DL_FUNC) &_cpp11imagemagick_magick_attr_comment,              2},
    {"_cpp11imagemagick_magick_attr_density",             (DL_FUNC) &_cpp11imagemagick_magick_attr_density,              2},
    {"_cpp11imagemagick_magick_attr_fillcolor",           (DL_FUNC) &_cpp11imagemagick_magick_attr_fillcolor,            2},
    {"_cpp11imagemagick_magick_attr_font",                (DL_FUNC) &_cpp11imagemagick_magick_attr_font,                 2},
    {"_cpp11imagemagick_magick_attr_fontsize",            (DL_FUNC) &_cpp11imagemagick_magick_attr_fontsize,             2},
    {"_cpp11imagemagick_magick_attr_format",              (DL_FUNC) &_cpp11imagemagick_magick_attr_format,               2},
    {"_cpp11imagemagick_magick_attr_label",               (DL_FUNC) &_cpp11imagemagick_magick_attr_label,                2},
    {"_cpp11imagemagick_magick_attr_quality",             (DL_FUNC) &_cpp11imagemagick_magick_attr_quality,              2},
    {"_cpp11imagemagick_magick_attr_quantize",            (DL_FUNC) &_cpp11imagemagick_magick_attr_quantize,             2},
    {"_cpp11imagemagick_magick_attr_stroke_antialias",    (DL_FUNC) &_cpp11imagemagick_magick_attr_stroke_antialias,     2},
    {"_cpp11imagemagick_magick_attr_text_antialias",      (DL_FUNC) &_cpp11imagemagick_magick_attr_text_antialias,       2},
    {"_cpp11imagemagick_magick_coder_info",               (DL_FUNC) &_cpp11imagemagick_magick_coder_info,                1},
    {"_cpp11imagemagick_magick_config_internal",          (DL_FUNC) &_cpp11imagemagick_magick_config_internal,           0},
    {"_cpp11imagemagick_magick_device_get",               (DL_FUNC) &_cpp11imagemagick_magick_device_get,                1},
    {"_cpp11imagemagick_magick_device_internal",          (DL_FUNC) &_cpp11imagemagick_magick_device_internal,           8},
    {"_cpp11imagemagick_magick_device_pop",               (DL_FUNC) &_cpp11imagemagick_magick_device_pop,                0},
    {"_cpp11imagemagick_magick_image_animate",            (DL_FUNC) &_cpp11imagemagick_magick_image_animate,             5},
    {"_cpp11imagemagick_magick_image_annotate",           (DL_FUNC) &_cpp11imagemagick_magick_image_annotate,           15},
    {"_cpp11imagemagick_magick_image_append",             (DL_FUNC) &_cpp11imagemagick_magick_image_append,              2},
    {"_cpp11imagemagick_magick_image_artifact",           (DL_FUNC) &_cpp11imagemagick_magick_image_artifact,            2},
    {"_cpp11imagemagick_magick_image_as_raster",          (DL_FUNC) &_cpp11imagemagick_magick_image_as_raster,           1},
    {"_cpp11imagemagick_magick_image_average",            (DL_FUNC) &_cpp11imagemagick_magick_image_average,             1},
    {"_cpp11imagemagick_magick_image_background",         (DL_FUNC) &_cpp11imagemagick_magick_image_background,          2},
    {"_cpp11imagemagick_magick_image_blank",              (DL_FUNC) &_cpp11imagemagick_magick_image_blank,               5},
    {"_cpp11imagemagick_magick_image_blur",               (DL_FUNC) &_cpp11imagemagick_magick_image_blur,                3},
    {"_cpp11imagemagick_magick_image_border",             (DL_FUNC) &_cpp11imagemagick_magick_image_border,              4},
    {"_cpp11imagemagick_magick_image_canny",              (DL_FUNC) &_cpp11imagemagick_magick_image_canny,               2},
    {"_cpp11imagemagick_magick_image_channel",            (DL_FUNC) &_cpp11imagemagick_magick_image_channel,             2},
    {"_cpp11imagemagick_magick_image_charcoal",           (DL_FUNC) &_cpp11imagemagick_magick_image_charcoal,            3},
    {"_cpp11imagemagick_magick_image_chop",               (DL_FUNC) &_cpp11imagemagick_magick_image_chop,                2},
    {"_cpp11imagemagick_magick_image_coalesce",           (DL_FUNC) &_cpp11imagemagick_magick_image_coalesce,            1},
    {"_cpp11imagemagick_magick_image_colorize",           (DL_FUNC) &_cpp11imagemagick_magick_image_colorize,            3},
    {"_cpp11imagemagick_magick_image_combine",            (DL_FUNC) &_cpp11imagemagick_magick_image_combine,             3},
    {"_cpp11imagemagick_magick_image_compare",            (DL_FUNC) &_cpp11imagemagick_magick_image_compare,             4},
    {"_cpp11imagemagick_magick_image_composite",          (DL_FUNC) &_cpp11imagemagick_magick_image_composite,           6},
    {"_cpp11imagemagick_magick_image_connect",            (DL_FUNC) &_cpp11imagemagick_magick_image_connect,             2},
    {"_cpp11imagemagick_magick_image_contrast",           (DL_FUNC) &_cpp11imagemagick_magick_image_contrast,            2},
    {"_cpp11imagemagick_magick_image_convolve_kernel",    (DL_FUNC) &_cpp11imagemagick_magick_image_convolve_kernel,     5},
    {"_cpp11imagemagick_magick_image_convolve_matrix",    (DL_FUNC) &_cpp11imagemagick_magick_image_convolve_matrix,     5},
    {"_cpp11imagemagick_magick_image_copy",               (DL_FUNC) &_cpp11imagemagick_magick_image_copy,                2},
    {"_cpp11imagemagick_magick_image_crop",               (DL_FUNC) &_cpp11imagemagick_magick_image_crop,                4},
    {"_cpp11imagemagick_magick_image_dead",               (DL_FUNC) &_cpp11imagemagick_magick_image_dead,                1},
    {"_cpp11imagemagick_magick_image_deskew",             (DL_FUNC) &_cpp11imagemagick_magick_image_deskew,              2},
    {"_cpp11imagemagick_magick_image_despeckle",          (DL_FUNC) &_cpp11imagemagick_magick_image_despeckle,           2},
    {"_cpp11imagemagick_magick_image_destroy",            (DL_FUNC) &_cpp11imagemagick_magick_image_destroy,             1},
    {"_cpp11imagemagick_magick_image_display",            (DL_FUNC) &_cpp11imagemagick_magick_image_display,             2},
    {"_cpp11imagemagick_magick_image_distort",            (DL_FUNC) &_cpp11imagemagick_magick_image_distort,             4},
    {"_cpp11imagemagick_magick_image_edge",               (DL_FUNC) &_cpp11imagemagick_magick_image_edge,                2},
    {"_cpp11imagemagick_magick_image_emboss",             (DL_FUNC) &_cpp11imagemagick_magick_image_emboss,              3},
    {"_cpp11imagemagick_magick_image_enhance",            (DL_FUNC) &_cpp11imagemagick_magick_image_enhance,             1},
    {"_cpp11imagemagick_magick_image_equalize",           (DL_FUNC) &_cpp11imagemagick_magick_image_equalize,            1},
    {"_cpp11imagemagick_magick_image_extent",             (DL_FUNC) &_cpp11imagemagick_magick_image_extent,              4},
    {"_cpp11imagemagick_magick_image_fft",                (DL_FUNC) &_cpp11imagemagick_magick_image_fft,                 1},
    {"_cpp11imagemagick_magick_image_fill",               (DL_FUNC) &_cpp11imagemagick_magick_image_fill,                5},
    {"_cpp11imagemagick_magick_image_flatten",            (DL_FUNC) &_cpp11imagemagick_magick_image_flatten,             2},
    {"_cpp11imagemagick_magick_image_flip",               (DL_FUNC) &_cpp11imagemagick_magick_image_flip,                1},
    {"_cpp11imagemagick_magick_image_flop",               (DL_FUNC) &_cpp11imagemagick_magick_image_flop,                1},
    {"_cpp11imagemagick_magick_image_format",             (DL_FUNC) &_cpp11imagemagick_magick_image_format,              9},
    {"_cpp11imagemagick_magick_image_frame",              (DL_FUNC) &_cpp11imagemagick_magick_image_frame,               3},
    {"_cpp11imagemagick_magick_image_fuzzycmeans",        (DL_FUNC) &_cpp11imagemagick_magick_image_fuzzycmeans,         3},
    {"_cpp11imagemagick_magick_image_fx",                 (DL_FUNC) &_cpp11imagemagick_magick_image_fx,                  3},
    {"_cpp11imagemagick_magick_image_fx_sequence",        (DL_FUNC) &_cpp11imagemagick_magick_image_fx_sequence,         2},
    {"_cpp11imagemagick_magick_image_houghline",          (DL_FUNC) &_cpp11imagemagick_magick_image_houghline,           5},
    {"_cpp11imagemagick_magick_image_implode",            (DL_FUNC) &_cpp11imagemagick_magick_image_implode,             2},
    {"_cpp11imagemagick_magick_image_info",               (DL_FUNC) &_cpp11imagemagick_magick_image_info,                1},
    {"_cpp11imagemagick_magick_image_join",               (DL_FUNC) &_cpp11imagemagick_magick_image_join,                1},
    {"_cpp11imagemagick_magick_image_lat",                (DL_FUNC) &_cpp11imagemagick_magick_image_lat,                 2},
    {"_cpp11imagemagick_magick_image_length",             (DL_FUNC) &_cpp11imagemagick_magick_image_length,              1},
    {"_cpp11imagemagick_magick_image_level",              (DL_FUNC) &_cpp11imagemagick_magick_image_level,               5},
    {"_cpp11imagemagick_magick_image_map",                (DL_FUNC) &_cpp11imagemagick_magick_image_map,                 3},
    {"_cpp11imagemagick_magick_image_median",             (DL_FUNC) &_cpp11imagemagick_magick_image_median,              2},
    {"_cpp11imagemagick_magick_image_modulate",           (DL_FUNC) &_cpp11imagemagick_magick_image_modulate,            4},
    {"_cpp11imagemagick_magick_image_montage",            (DL_FUNC) &_cpp11imagemagick_magick_image_montage,             6},
    {"_cpp11imagemagick_magick_image_morph",              (DL_FUNC) &_cpp11imagemagick_magick_image_morph,               2},
    {"_cpp11imagemagick_magick_image_morphology",         (DL_FUNC) &_cpp11imagemagick_magick_image_morphology,          6},
    {"_cpp11imagemagick_magick_image_mosaic",             (DL_FUNC) &_cpp11imagemagick_magick_image_mosaic,              2},
    {"_cpp11imagemagick_magick_image_motion_blur",        (DL_FUNC) &_cpp11imagemagick_magick_image_motion_blur,         4},
    {"_cpp11imagemagick_magick_image_negate",             (DL_FUNC) &_cpp11imagemagick_magick_image_negate,              1},
    {"_cpp11imagemagick_magick_image_noise",              (DL_FUNC) &_cpp11imagemagick_magick_image_noise,               2},
    {"_cpp11imagemagick_magick_image_normalize",          (DL_FUNC) &_cpp11imagemagick_magick_image_normalize,           1},
    {"_cpp11imagemagick_magick_image_oilpaint",           (DL_FUNC) &_cpp11imagemagick_magick_image_oilpaint,            2},
    {"_cpp11imagemagick_magick_image_ordered_dither",     (DL_FUNC) &_cpp11imagemagick_magick_image_ordered_dither,      2},
    {"_cpp11imagemagick_magick_image_orient",             (DL_FUNC) &_cpp11imagemagick_magick_image_orient,              2},
    {"_cpp11imagemagick_magick_image_page",               (DL_FUNC) &_cpp11imagemagick_magick_image_page,                3},
    {"_cpp11imagemagick_magick_image_properties",         (DL_FUNC) &_cpp11imagemagick_magick_image_properties,          1},
    {"_cpp11imagemagick_magick_image_quantize",           (DL_FUNC) &_cpp11imagemagick_magick_image_quantize,            5},
    {"_cpp11imagemagick_magick_image_read_list",          (DL_FUNC) &_cpp11imagemagick_magick_image_read_list,           1},
    {"_cpp11imagemagick_magick_image_readbin",            (DL_FUNC) &_cpp11imagemagick_magick_image_readbin,             5},
    {"_cpp11imagemagick_magick_image_readbitmap_double",  (DL_FUNC) &_cpp11imagemagick_magick_image_readbitmap_double,   1},
    {"_cpp11imagemagick_magick_image_readbitmap_native",  (DL_FUNC) &_cpp11imagemagick_magick_image_readbitmap_native,   1},
    {"_cpp11imagemagick_magick_image_readbitmap_raster1", (DL_FUNC) &_cpp11imagemagick_magick_image_readbitmap_raster1,  1},
    {"_cpp11imagemagick_magick_image_readbitmap_raster2", (DL_FUNC) &_cpp11imagemagick_magick_image_readbitmap_raster2,  1},
    {"_cpp11imagemagick_magick_image_readbitmap_raw",     (DL_FUNC) &_cpp11imagemagick_magick_image_readbitmap_raw,      1},
    {"_cpp11imagemagick_magick_image_readpath",           (DL_FUNC) &_cpp11imagemagick_magick_image_readpath,            5},
    {"_cpp11imagemagick_magick_image_reducenoise",        (DL_FUNC) &_cpp11imagemagick_magick_image_reducenoise,         2},
    {"_cpp11imagemagick_magick_image_repage",             (DL_FUNC) &_cpp11imagemagick_magick_image_repage,              1},
    {"_cpp11imagemagick_magick_image_replace",            (DL_FUNC) &_cpp11imagemagick_magick_image_replace,             3},
    {"_cpp11imagemagick_magick_image_resize",             (DL_FUNC) &_cpp11imagemagick_magick_image_resize,              3},
    {"_cpp11imagemagick_magick_image_rev",                (DL_FUNC) &_cpp11imagemagick_magick_image_rev,                 1},
    {"_cpp11imagemagick_magick_image_rotate",             (DL_FUNC) &_cpp11imagemagick_magick_image_rotate,              2},
    {"_cpp11imagemagick_magick_image_sample",             (DL_FUNC) &_cpp11imagemagick_magick_image_sample,              2},
    {"_cpp11imagemagick_magick_image_scale",              (DL_FUNC) &_cpp11imagemagick_magick_image_scale,               2},
    {"_cpp11imagemagick_magick_image_separate",           (DL_FUNC) &_cpp11imagemagick_magick_image_separate,            2},
    {"_cpp11imagemagick_magick_image_set_define",         (DL_FUNC) &_cpp11imagemagick_magick_image_set_define,          4},
    {"_cpp11imagemagick_magick_image_shade",              (DL_FUNC) &_cpp11imagemagick_magick_image_shade,               4},
    {"_cpp11imagemagick_magick_image_shadow_mask",        (DL_FUNC) &_cpp11imagemagick_magick_image_shadow_mask,         2},
    {"_cpp11imagemagick_magick_image_shear",              (DL_FUNC) &_cpp11imagemagick_magick_image_shear,               3},
    {"_cpp11imagemagick_magick_image_strip",              (DL_FUNC) &_cpp11imagemagick_magick_image_strip,               1},
    {"_cpp11imagemagick_magick_image_subset",             (DL_FUNC) &_cpp11imagemagick_magick_image_subset,              2},
    {"_cpp11imagemagick_magick_image_threshold_black",    (DL_FUNC) &_cpp11imagemagick_magick_image_threshold_black,     3},
    {"_cpp11imagemagick_magick_image_threshold_white",    (DL_FUNC) &_cpp11imagemagick_magick_image_threshold_white,     3},
    {"_cpp11imagemagick_magick_image_transparent",        (DL_FUNC) &_cpp11imagemagick_magick_image_transparent,         3},
    {"_cpp11imagemagick_magick_image_trim",               (DL_FUNC) &_cpp11imagemagick_magick_image_trim,                2},
    {"_cpp11imagemagick_magick_image_write",              (DL_FUNC) &_cpp11imagemagick_magick_image_write,               7},
    {"_cpp11imagemagick_magick_image_write_frame",        (DL_FUNC) &_cpp11imagemagick_magick_image_write_frame,         3},
    {"_cpp11imagemagick_magick_image_write_integer",      (DL_FUNC) &_cpp11imagemagick_magick_image_write_integer,       1},
    {"_cpp11imagemagick_magick_resource_limits",          (DL_FUNC) &_cpp11imagemagick_magick_resource_limits,           0},
    {"_cpp11imagemagick_magick_threads",                  (DL_FUNC) &_cpp11imagemagick_magick_threads,                   1},
    {"_cpp11imagemagick_my_magick_init",                  (DL_FUNC) &_cpp11imagemagick_my_magick_init,                   1},
    {"_cpp11imagemagick_set_magick_seed",                 (DL_FUNC) &_cpp11imagemagick_set_magick_seed,                  1},
    {"_cpp11imagemagick_set_magick_tempdir",              (DL_FUNC) &_cpp11imagemagick_set_magick_tempdir,               1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cpp11imagemagick(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
